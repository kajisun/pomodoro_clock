{"version":3,"sources":["components/TimeController.jsx","components/PomodoroTimer.jsx","App.js","serviceWorker.js","index.js"],"names":["TimeController","label","time","updateLength","lengthInMinutes","id","onClick","momentDurationFormatSetup","moment","PomodoroTimer","useState","sessionLength","setSessionLength","breakLength","setBreakLength","timeLeft","setTimeLeft","isRunning","setIsRunnning","mode","setMode","audioElement","useRef","warningStyle","color","length","delta","newLength","handleTimer","newTimeLeft","current","play","savedCallBack","formattedTimeLeft","duration","format","trim","useEffect","setInterval","clearInterval","style","pause","currentTime","ref","src","type","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPAeeA,EAZQ,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAC7BC,EAAkBF,EAAO,GAC/B,OACI,6BACI,uBAAGG,GAAIJ,EAAQ,UAAWA,GAC1B,4BAAQI,GAAIJ,EAAQ,aAAcK,QAASH,EAAaD,EAAMD,EAAnBE,EAA2B,KAAtE,KACA,4BAAQE,GAAIJ,EAAQ,aAAcK,QAASH,EAAaD,EAAMD,EAAnBE,CAA0B,KAArE,KACA,uBAAGE,GAAIJ,EAAQ,WAAYG,K,MCLvCG,GAA0BC,KAC1B,IAsGeC,EAnGO,WAAO,IAAD,EACkBC,mBAJpB,MAGE,mBACjBC,EADiB,KACFC,EADE,OAEcF,mBAJpB,KAEM,mBAEjBG,EAFiB,KAEJC,EAFI,OAGQJ,mBAASC,GAHjB,mBAGjBI,EAHiB,KAGPC,EAHO,OAIWN,oBAAS,GAJpB,mBAIjBO,EAJiB,KAINC,EAJM,OAKAR,mBAAS,WALT,mBAKjBS,EALiB,KAKXC,EALW,KAMlBC,EAAeC,iBAAO,MAEtBC,EAAeR,EAAW,GAAK,CAACS,MAAO,OAAS,GAEhDrB,EAAe,SAACsB,EAAQxB,GAAT,OAAmB,SAAAyB,GAAK,OAAI,WAC7C,IAAIC,EAAYF,EAASC,EACzBC,EAAYA,EAAY,KAAU,KAAUA,EAAY,GAAK,GAAKA,EAC7DV,IACY,YAAVhB,IACCW,EAAiBe,GACJ,YAATR,GACAH,EAAYW,IAGP,UAAV1B,IACCa,EAAea,GACF,UAATR,GACAH,EAAYW,QAiCtBC,EAAc,WAChB,IAAMC,EAAcd,EAAW,EAC3Bc,GAAe,GACfb,EAAYa,GACI,IAAhBA,GAAqBR,EAAaS,QAAQC,QAbjC,YAATZ,GACAC,EAAQ,SACRJ,EAAYH,KAEZO,EAAQ,WACRJ,EAAYL,KAcdqB,EAAgBV,mBAEhBW,EAAoBzB,IAAO0B,SAASnB,EAAU,KAAKoB,OAAO,QAAS,CAAEC,MAAM,IAejF,OAbAC,qBAAU,WACNL,EAAcF,QAAUF,KAG5BS,qBAAU,WAIN,GAAIpB,EAAW,CACX,IAAIZ,EAAKiC,aAJA,WACTN,EAAcF,YAGa,KAC3B,OAAO,kBAAMS,cAAclC,OAEhC,CAACY,IAEA,6BACI,kBAAC,EAAD,CAAgBhB,MAAO,QAASC,KAAMW,EAAaV,aAAcA,IACjE,kBAAC,EAAD,CAAgBF,MAAO,UAAWC,KAAMS,EAAeR,aAAcA,IACrE,yBAAKE,GAAG,cAAcmC,MAAOjB,GACzB,yBAAKlB,GAAG,eAAuB,YAARc,EAAoB,UAAY,SACvD,yBAAKd,GAAG,aAAa4B,IAEzB,4BAAQ5B,GAAG,aAAaC,QApDV,WAClBY,GAAeD,GACF,KAATE,GACAC,EAAQ,aAiDyCH,EAAY,OAAS,OACtE,4BAAQZ,GAAG,QAAQC,QA/DP,WAChBM,EAjCkB,MAkClBE,EAjCc,KAkCdM,EAAQ,WACRF,GAAc,GACdF,EArCkB,MAsClBK,EAAaS,QAAQW,QACrBpB,EAAaS,QAAQY,YAAc,IAwD/B,SACA,2BAAOrC,GAAG,OAAOsC,IAAKtB,EAAcuB,IAAI,4GAA4GC,KAAK,eACnJ,qCC3FHC,EARH,WACR,OACI,yBAAKC,UAAU,OACX,kBAAC,EAAD,QCKQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0a5aba6b.chunk.js","sourcesContent":["import React from 'react';\r\nimport moment from 'moment';\r\n\r\nconst TimeController = ({ label, time, updateLength }) => {\r\n    const lengthInMinutes = time / 60;\r\n    return (\r\n        <div>\r\n            <p id={label + \"-label\"}>{label}</p>\r\n            <button id={label + \"-decrement\"} onClick={updateLength(time, label)(-60)}>-</button>\r\n            <button id={label + \"-increment\"} onClick={updateLength(time, label)(60)}>+</button>\r\n            <p id={label + \"-length\"}>{lengthInMinutes}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TimeController;\r\n","import React, {useState, useEffect, useRef} from 'react';\r\nimport moment from 'moment';\r\nimport momentDurationFormatSetup from 'moment-duration-format';\r\nimport TimeController from './TimeController';\r\n\r\nmomentDurationFormatSetup(moment);\r\nconst initSessionLength = 25 * 60,\r\n    initBreakLength = 5 * 60;\r\n\r\nconst PomodoroTimer = () => {\r\n    const [sessionLength, setSessionLength] = useState(initSessionLength);\r\n    const [breakLength, setBreakLength] = useState(initBreakLength);\r\n    const [timeLeft, setTimeLeft] = useState(sessionLength);\r\n    const [isRunning, setIsRunnning] = useState(false);\r\n    const [mode, setMode] = useState(\"session\");\r\n    const audioElement = useRef(null);\r\n\r\n    const warningStyle = timeLeft < 60 ? {color: \"red\"} : {};\r\n    \r\n    const updateLength = (length, label) => delta => () => {\r\n        let newLength = length + delta;\r\n        newLength = newLength > 60 * 60 ? 60 * 60 : newLength < 60 ? 60 : newLength;\r\n        if (!isRunning) {\r\n            if(label === \"session\") {\r\n                setSessionLength(newLength);\r\n                if (mode === \"session\") {\r\n                    setTimeLeft(newLength);\r\n                }\r\n            }\r\n            if(label === \"break\") {\r\n                setBreakLength(newLength);\r\n                if (mode === \"break\") {\r\n                    setTimeLeft(newLength);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleReset = () => {\r\n        setSessionLength(initSessionLength);\r\n        setBreakLength(initBreakLength);\r\n        setMode(\"session\");\r\n        setIsRunnning(false);\r\n        setTimeLeft(initSessionLength);\r\n        audioElement.current.pause();\r\n        audioElement.current.currentTime = 0;\r\n    }\r\n\r\n    const handleRunStop = () => {\r\n        setIsRunnning(!isRunning);\r\n        if (mode === \"\") {\r\n            setMode(\"session\");\r\n        }\r\n    }\r\n\r\n    const handleZero = () => {\r\n        if (mode === \"session\") {\r\n            setMode(\"break\");\r\n            setTimeLeft(breakLength);\r\n        } else {\r\n            setMode(\"session\");\r\n            setTimeLeft(sessionLength);\r\n        }\r\n    }\r\n\r\n    const handleTimer = () =>  {\r\n        const newTimeLeft = timeLeft - 1;\r\n        if (newTimeLeft >= 0) {\r\n            setTimeLeft(newTimeLeft);\r\n            newTimeLeft === 0 && audioElement.current.play();\r\n        } else {\r\n            handleZero();\r\n        }\r\n    }\r\n\r\n    const savedCallBack = useRef();\r\n\r\n    const formattedTimeLeft = moment.duration(timeLeft, \"s\").format(\"mm:ss\", { trim: false });\r\n\r\n    useEffect(() => {\r\n        savedCallBack.current = handleTimer;\r\n    })\r\n\r\n    useEffect(() => {\r\n        const tick = () => {\r\n            savedCallBack.current();\r\n        }\r\n        if (isRunning) {\r\n            let id = setInterval(tick, 1000);\r\n            return () => clearInterval(id);\r\n        }\r\n    }, [isRunning]);\r\n    return (\r\n        <div>\r\n            <TimeController label={\"break\"} time={breakLength} updateLength={updateLength} />\r\n            <TimeController label={\"session\"} time={sessionLength} updateLength={updateLength} />\r\n            <div id=\"timer-label\" style={warningStyle} >\r\n                <div id=\"timer-label\">{mode ===\"session\" ? \"Session\" : \"Break\" }</div>\r\n                <div id=\"time-left\">{formattedTimeLeft}</div>\r\n            </div>\r\n            <button id=\"start_stop\" onClick={handleRunStop}>{isRunning ? \"stop\" : \"run\"}</button>\r\n            <button id=\"reset\" onClick={handleReset}>Reset</button>\r\n            <audio id=\"beep\" ref={audioElement} src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\" type=\"audio/wav\"></audio>\r\n                {!<p>test</p>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PomodoroTimer;\r\n","import React from 'react';\nimport './App.css';\nimport PomodoroTimer from \"./components/PomodoroTimer\";\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <PomodoroTimer />\n        </div>\n    );\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}